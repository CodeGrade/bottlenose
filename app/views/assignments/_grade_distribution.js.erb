<%
@sections = @course.sections.map{|s| [s.id, s]}.to_h
@theGrades = @gradesheet.grades[:grades].values.map do |g|
  [
    if @gradesheet.max_score.zero?
      0
    else
      100.0 * g[:staff_scores][:raw_score] / @gradesheet.max_score
    end,
    g[:staff_scores][:scores].map{|a| a[0]},
    (@sections_by_student[@students[g[:sub].user_id]&.reg_id] || []).map{|s| @sections[s.section_id].crn}
  ]
end
@sections_by_type = @course.sections.map{|s| [s.type, s.crn, s.to_s]}.group_by(&:first)
  .map{|t, secs| [t.humanize.pluralize, secs.map{|s| s.drop(1)}.to_h]}.to_h
%>
var grades = <%= raw json_escape(JSON.generate(@theGrades)) %>;
var sectionTypes = <%= raw json_escape(JSON.generate(@sections_by_type)) %>;
GoogleCharts.load('corechart', function() {
  var colors = ['steelblue', 'maroon', 'gold', 'seagreen', 'orange', 'indigo',
                'dodgerblue', 'firebrick', 'goldenrod', 'mediumseagreen', 'sandybrown', 'darkmagenta']
  var data = GoogleCharts.api.visualization.arrayToDataTable([["Grade"]].concat(grades.map((a) => [a[0]])));
  var options = {
    title: 'Grade distribution',
    legend: { position: 'none' },
    colors: [colors[0]],
    interpolateNulls: false,
    hAxis: {type: 'category'},
    histogram: {bucketSize: 5, minValue: 0, hideBucketItems: true}
  };
  var chart = new GoogleCharts.api.visualization.Histogram(document.getElementById('histogram'));
  chart.draw(data, options);


  var colorStart = 9;
  for (var type in sectionTypes) {
    var data = [];
    var sections = sectionTypes[type];
    for (var crn in sections) {
      var row = [];
      var section = sections[crn];
      row.push(section);
      crn = Number.parseInt(crn);
      for (var i = 0; i < grades.length; i++) {
        if (grades[i][2].includes(crn))
          row.push(grades[i][0]);
      }
      data.push(row);
    }
    var transposed = [];
    var longest = Math.max.apply(null, data.map((r) => r.length));
    for (var i = 0; i < longest; i++) {
      transposed[i] = [];
      for (var j = 0; j < data.length; j++) {
        transposed[i][j] = data[j][i] === undefined ? null : data[j][i];
      }
    }
    var numLines = Math.ceil(data.length / 4);
    var data = GoogleCharts.api.visualization.arrayToDataTable(transposed);
    var options = {
      title: type,
      legend: { position: 'bottom', maxLines: numLines },
      interpolateNulls: false,
      hAxis: {type: 'category'},
      bar: {group: {gap: 8}},
      colors: transposed[0].map((_, i) => colors[(i + colorStart) % colors.length]),
      histogram: {bucketSize: 5, minValue: 0, hideBucketItems: true}
    };
    colorStart += transposed[0].length;
    var container = document.getElementById("bySectionTypes");
    var div = document.createElement("div");
    container.appendChild(div);
    var chart = new GoogleCharts.api.visualization.Histogram(div);
    chart.draw(data, options);
  }

  
  var graders = <%= raw json_escape(JSON.generate(@gradesheet.grades[:graders].map(&:display_type))) %>;
  var maxes = <%= raw json_escape(JSON.generate(@gradesheet.grades[:graders].map(&:avail_score))) %>;
  <% question_names = @gradesheet.assignment.flattened_questions || []
     question_sections = @gradesheet.assignment.sections || {}
     question_maxes = question_names.map{|a| a["weight"].to_f }
     question_names = question_names.zip(1..question_names.length).map do |a, i| a["name"] || "Question #{i}" end %>
  var questions = <%= raw json_escape(JSON.generate(question_names)) %>;
  var sections = <%= raw json_escape(JSON.generate(question_sections)) %>;
  var question_maxes = <%= raw json_escape(JSON.generate(question_maxes)) %>;
  if (graders.length > 1) {
    var width = Math.floor(100.0 / graders.length);
    var container = document.getElementById("byGraders");
    for (var i = 0; i < graders.length; i++) {
      data = GoogleCharts.api.visualization.arrayToDataTable([[graders[i]]].concat(grades.map((a) => [(a[1] || [])[i]])));
      options = {
        title: graders[i] + " grades",
        colors: [colors[(i + 1) % colors.length]],
        legend: { position: 'none' },
        histogram: {
          hideBucketItems: true,
          lastBucketPercentile: 2,
          bucketSize: (maxes[i] < 10 ? 0.5 : (maxes[i] <= 20 ? 1 : undefined))
        },
        hAxis: {type: 'category'},
        interpolateNulls: false,
      };
      var div = document.createElement("div");
      div.style = "display: inline-block; width: " + width + "%;";
      container.appendChild(div);
      chart = new GoogleCharts.api.visualization.Histogram(div);
      chart.draw(data, options);
    }
  } else if (questions.length > 0) {
    var qgrades = <%= raw json_escape(JSON.generate(@gradesheet.grades[:grades].map{|_, g| g[:q_scores]})) %>;
    var container = document.getElementById("byGraders");
    var width = Math.max(20, Math.floor(100.0 / questions.length));
    var offset = 0;
    for (var section = 0; section < sections.length; section++) {
      var secContainer = container;
      if (sections[section].name !== "") {
        var header = document.createElement("h4");
        header.innerText = sections[section].name;
        secContainer = document.createElement("div");
        secContainer.appendChild(header);
        container.append(secContainer);
      }
      for (var i = offset; i < sections[section].count + offset; i++) {
        data = GoogleCharts.api.visualization.arrayToDataTable([[questions[i]]].concat(qgrades.map((a) => [(a[0] || [])[i]])));
        options = {
          title: questions[i],
          colors: [colors[(i + 1) % colors.length]],
          legend: { position: 'none' },
          histogram: {
            hideBucketItems: true,
            lastBucketPercentile: 2,
            bucketSize: (question_maxes[i] <= 3 ? 0.25 :
                         (question_maxes[i] <= 10 ? 0.5 :
                          (question_maxes[i] <= 20 ? 1 : undefined)))
          },
          hAxis: {type: 'category'},
          interpolateNulls: false,
        };
        var div = document.createElement("div");
        div.style = "display: inline-block; width: " + width + "%;";
        secContainer.appendChild(div);
        chart = new GoogleCharts.api.visualization.Histogram(div);
        chart.draw(data, options);
      }
      offset += sections[section].count;
    }
  }
  document.getElementById("grade-histograms").classList.remove("initial")
  document.getElementById("toggle-histograms").removeAttribute("disabled");
  $("#grade-histograms .item").removeClass("active").first().addClass("active");
});
