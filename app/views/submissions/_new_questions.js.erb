$(function() {
  $('button.btn.answer').click(function() {
    $('button.btn.answer[data-id="'+$(this).data('id')+'"]').removeClass('active');
    $(this).addClass('active');
    $('input#'+$(this).data('id')).val($(this).text());
  });
  $('.spinner').each(function() { activateSpinner(this, {precision: 2}) });
  $('select.pick-file').change(function() {
    // -1 for the "--select a file--" option, -1 for the "<none>" option
    var pieces = $(this)[0].name.match(/(\[[_a-z0-9]+\])/g);
    selectTreeviewFileByIndex("sub_" + pieces[0].slice(1, -1), this.selectedIndex - 2);
    $(this).next("input").prop('disabled', this.selectedIndex === 1);
    if (this.selectedIndex === 1)
      $(this).next("input").removeClass("badAnswer");
  });
});
$(function() {
  var answers = $("[name^='answers']:not(.optional)");
  var byNames = {};
  var nameChunk = /\[.*?\]/g;
  function isTextInput(elem) {
    return elem instanceof HTMLTextAreaElement ||
      (elem instanceof HTMLInputElement && elem.type === "text");
  }
  answers.each(function() {
    var cur = byNames;
    // this.name == answers[sub_id][question_num][part][optional_part_num]...ignored suffix...
    // so we slice off the first four bracketed parts (assuming there are four parts)
    var matches = this.name.match(nameChunk).slice(0, 4);
    var i;
    var question;
    for (i = 0; i < matches.length; i++) {
      if (cur[matches[i]] === undefined)
        cur[matches[i]] = {};
      cur = cur[matches[i]];
      if (i == 1) question = cur;
    }
    if (cur.parts === undefined) {
      cur.parts = [];
      cur.answered = false;
    }
    var res = { answered: false, target: this, group: cur, question: question };
    function clean(e) {
      if (this instanceof HTMLSelectElement) {
        if (this.selectedIndex != 0) {
          res.answered = true;
          if (this.selectedIndex == 1) {
            res.group.answered = true; // <none> option
          } else {
            res.group.answered = ($(res.group.parts[1]).val() !== "");
          }
        }
      } else if (isTextInput(this)) {
        res.answered = res.group.answered = ($(this).val().trim() !== "");
      } else if (this instanceof HTMLButtonElement) {
        if (e || $(this).hasClass("active")) {
          res.answered = res.group.answered = true;
        }
      } else if (this instanceof HTMLInputElement) {
        if (this.type === "radio") {
          if (e || this.checked) {
            res.answered = res.group.answered = true;
          }
        } else if ($('button.btn.answer[data-id="' + this.id + '"]').length > 0) {
          if (this.value !== "") {
            res.answered = res.group.answered = true;
          }
        } else {
          debugger
        }
      } else {
        debugger
      }
      if (res.group.answered) {
        for (var idx = 0; idx < res.group.parts.length; idx++)
          $(res.group.parts[idx].target).removeClass("unanswered");
      } else if (res.answered) {
        $(res.target).removeClass("unanswered");
      }
    }
    clean.apply(this);
    cur.parts.push(res);
    $(this).on("change", clean).on("focus", clean);
    $('button.btn.answer[data-id="' + this.id + '"]').on("click", clean);
    if (this instanceof HTMLInputElement && this.type === "hidden") {
      $("button.btn.answer[data-id='" + this.id + "']").each(function() {
        var res = { answered: false, target: this, group: cur, question: question };
        cur.parts.push(res);
        $(this).on("change", clean).on("focus", clean);
      });
    }
  });
 
  $(".spinner input").each(function() {
    var pieces = $(this)[0].name.match(/(\[[_a-z0-9]+\])/g);
    if (pieces === null || pieces.length != 2) return;
    answered[pieces[0].slice(1, -1)].answered[pieces[1].slice(1, -1)] = true;
  });  

  $('select.pick-file').each(function() {
    // index 1 is the "<none>" option
    if (this.selectedIndex === 1)
      $(this).next("input").prop('disabled', true).removeClass("unanswered").removeClass("badAnswer");
  });
  
  $("form").submit(function(e) {
    try {
      var unansweredInputs = [];
      function findUnanswered(cur) {
        if (cur instanceof Array) {
          for (var i = 0; i < cur.length; i++) {
            if (!cur[i].group.answered && !cur[i].answered && !$(cur[i].target).prop('disabled'))
              unansweredInputs.push(cur[i]);
          }
        } else {
          for (var key in cur) {
            findUnanswered(cur[key]);
          }
        }
      }
      findUnanswered(byNames);
      var unansweredParts = [];
      for (var i = 0; i < unansweredInputs.length; i++) {
        var found = false;
        for (var j = 0; j < unansweredParts.length; j++) {
          if (unansweredInputs[i].question === unansweredParts[j].question) {
            found = true;
            break;
          }
        }
        if (!found)
          unansweredParts.push(unansweredInputs[i]);
      }
      if (unansweredParts.length > 0) {
        e.preventDefault();
        if (unansweredParts.length == 1) {
          alert("There is one question unanswered");
        } else {
          alert("There are " + unansweredParts.length + " questions unanswered");
        }
        $(unansweredInputs).each(function() {
          var $target = $(this.target);
          if (!$target.prop("disabled") && !this.answered) $target.addClass("unanswered");
          if (this.target.type === "hidden")
            $("button.btn.answer[data-id='" + this.target.id + "']").addClass("unanswered");
        });
        $(".spinner input.unanswered[val!='']").removeClass("unanswered");
        return false;
      }
    } catch (exn) {
      alert("Something went wrong: " + exn);
      e.preventDefault();
    }
  });
 });
